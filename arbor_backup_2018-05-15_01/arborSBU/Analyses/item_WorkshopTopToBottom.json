{"_id": "5846e52f54cdbf7e75d96bb6", "_modelType": "item", "baseParentId": "5768524b54cdbf3c14cc45c2", "baseParentType": "collection", "created": "2016-12-06T16:19:59.415000+00:00", "creatorId": "57ed6c5454cdbf74fd194495", "description": "", "folderId": "5768524b54cdbf3c14cc45c4", "meta": {"analysis": {"description": "", "inputs": [{"description": "table:r.dataframe as csv for community data matrix", "format": "r.dataframe", "id": "comm", "name": "comm", "type": "table"}, {"description": "metadata as a csv file imported as table:r.dataframe", "domain": {"format": "column.names", "input": "column_to_aggregate"}, "format": "r.dataframe", "id": "metadata", "name": "metadata", "type": "table"}, {"format": "r.dataframe", "id": "traits", "name": "traits", "type": "table"}, {"format": "r.apetree", "id": "phylogeny", "name": "phylogeny", "type": "tree"}], "mode": "r", "name": "WorkshopTopToBottom", "outputs": [{"format": "png.base64", "id": "treePlot", "name": "treePlot", "type": "image"}, {"format": "r.dataframe", "id": "comm", "name": "comm", "type": "table"}, {"format": "png.base64", "id": "traitCorr", "name": "traitCorr", "type": "image"}, {"format": "png.base64", "id": "traitCorrTrans", "name": "traitCorrTrans", "type": "image"}, {"format": "r.dataframe", "id": "traits", "name": "traits", "type": "table"}, {"format": "r.dataframe", "id": "list.data", "name": "list.data", "type": "table"}, {"format": "r.dataframe", "id": "Are.they.equal", "name": "Are.they.equal", "type": "table"}, {"format": "r.dataframe", "id": "metadata", "name": "metadata", "type": "table"}, {"format": "png.base64", "id": "treePlotCheck", "name": "treePlotCheck", "type": "image"}, {"format": "png.base64", "id": "boxPlot", "name": "boxPlot", "type": "image"}], "script": "#td<-\"/vagrant/app/data\" #  FOR ARBOR 1 OR 2\n\nlibrary(picante)\nlibrary(cardoonTools)\nlibrary(ape)\n#library(ggtree)\n#library(ggplot2)\n#library(geiger)\n\n#load(\"R_biodiversity_workspace.RData\")  #JOE: all files can be found at >http://kembellab.ca/r-workshop/biodivR/\n#JOE: we don't seem to need the above RData file.  We obtain all of the objects, lists, etc. from the csv's and other files.\n\n\n#\"Each cell contains the percent cover of a species in a sample. \n#Many multivariate methods are sensitive to the total abundance \n#in a sample, so we should probably convert these absolute abundance \n#estimates to a relative abundance estimate. We can do this with a function from the vegan package.\"\n\n#first we need to save the rownames and paste them back onto the table when need be\nrownames <- comm[,1]\n\ncomm<- decostand(comm[,-1], method=\"total\")\n\n#lets put the rownames back on for now to keep everything tidy\n#the next two lines of script are from Bob's decostand script in Arbor1\n\ncomm <- cbind(rownames(comm), comm)\ncolnames(comm)[1] <- \"rownames\"\n\n\n#Trait data\n\ntraits1<-traits[,-1]   #we need to take out the species names but can put them back in if we want.  Except names aren't numeric, so how is R finding correlations between species names and other data?\n\ntraitCorr = cardoonPlot(expression(pairs(traits1)), width=1000, height=1000, res=100)\ntraitCorr = traitCorr$png\n\n# some variables look skewed - log transform all variables\ntraits1 <- log10(traits1)\n\n\n# plot the transformed data\n\ntraitCorrTrans = cardoonPlot(expression(pairs(traits1)), width=1000, height=1000, res=100)\ntraitCorrTrans = traitCorrTrans$png\n\n\n#lets put species names back as the rows\ntraits <- cbind(rownames(traits), traits1)\ncolnames(traits)[1] <- \"species\"\n\n#next lets print the dataframe\n\nprintTraits<-traits\n\n\n\n\n\n\n\n\n#skipped ahead to the phylogeny\n#newick is being difficult.  It can read r:apetree files okay. Lets convert using read.tree and see if that works.  We will keep the \"phylogeny\" input as a newick format.\n\n#lets test this later\n#phyloConvFromApe<-read.tree(phylogeny)\n\nphy<-as.phylo(phylogeny)\n\n\npicplot <- function(phy){\n  plot(phy, cex=0.5)\n}\n  \ntreePlot = cardoonPlot(expression(picplot(phy)), width=1000, height=1000, res=100)\ntreePlot = treePlot$png\n\n\n\n\n\n\n\n\n\n\n\n\n#Cleaning and matching data sets\nlist.data<-ls()    #JOE: CAN PROBABLY TAKE THIS OUT OF THE PRINTED OUTPUTS AND THE ANALYSIS ALTOGETHER, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\n# check for mismatches/missing species\ncombined <- match.phylo.comm(phy, comm)  #JOE: here we are matching the phylogeny with the decostand output\n# the resulting object is a list with $phy and $comm elements.  replace our\n# original data with the sorted/matched data\n\nphy <- combined$phy    #JOE: CAN PROBABLY TAKE THIS OUT OF THE PRINTED OUTPUTS, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\ncomm <- combined$comm   #JOE: CAN PROBABLY TAKE THIS OUT OF THE PRINTED OUTPUTS, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\n\ncomm <- cbind(rownames(comm), comm) #to put rownames back on\ncolnames(comm)[1] <- \"rownames\"\n\n#now we are going to do the same matching for our trait data.\n\ncombined <- match.phylo.data(phy, traits)\n# the resulting object is a list with $phy and $data elements.  replace our\n# original data with the sorted/matched data\nphy <- combined$phy  #JOE: CAN PROBABLY TAKE THIS OUT OF THE PRINTED OUTPUTS, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\ntraits <- combined$data #JOE: CAN PROBABLY TAKE THIS OUT OF THE PRINTED OUTPUTS, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\n\n\n#We should also check whether our community data and metadata are in the same order.\nAre.they.equal<-as.data.frame(all.equal(rownames(comm), rownames(metadata)))   #JOE: CAN PROBABLY TAKE THIS OUT LATER, I AM JUST MAKING SURE EVERYTHING MATCHES WITH THE WORKSHOP'S RESULTS\n\n\n# they all match - if they didn't we could sort them to the same order sort\n# metadata rows to be in the same order as community rows\nmetadata <- metadata[rownames(comm), ]\n\n\n\n\n\n#Joe: The next 10 or so lines of code is a workaround.  I am unable to print \"phy\" or \"coerce object of class 'phylo' to dataframe\".  So, in order to make sure all of the same information is present in 'phy', I am going to construct a tree and call it TreePlotCheck.  We can get rid of this later.\n\n\npicplot1 <- function(phy){\n  plot(phy, cex=0.5)\n}\n  \ntreePlotCheck = cardoonPlot(expression(picplot1(phy)), width=1000, height=1000, res=100)\ntreePlotCheck = treePlotCheck$png\n\n#it works up to here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#visualizing and summarizing biodiversity data\n#community richness and diversity\n\n# compare species richness between fescue and mixedgrass habitats\n\n#boxplot(specnumber(comm) ~ metadata$habitat, ylab = \"# of species\")\n\npicplot2 <- function(comm, habitat){\n  boxplot(specnumber(comm) ~ metadata$habitat, ylab = \"# of species\", ylim=c(5, 30))\n}\n  \nboxPlot = cardoonPlot(expression(picplot2(comm, habitat)), width=1000, height=1000, res=100)\nboxPlot = boxPlot$png\n\n\n\n\n\n\n\n\n\n\n\n\n#boxplotToPrint<-boxplot(specnumber(comm) ~ metadata$habitat, ylab = \"# of species\")\n\n###p<-ggplot(comm, aes( metadata$habitat,specnumber(comm)))\n###q <- p + geom_boxplot() + labs(y = \"# of species\", x = \"\") +\n###  theme(text = element_text(size=20), axis.title.y = element_text(hjust=0.5), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())# +\n###  axis.line = element_line(colour = \"black\")\n\n\n###boxplot = cardoonPlot(q, width=1000, height=1000, res=100,)\n###boxplot = boxplot$png\n\n\n###############ff<-formula(paste(\"specnumber(comm) ~ metadata$habitat\"), sep=\"\")\n\n###############boxplotFunction <- function(){\n###############boxplot(ff, ylab = \"# of species\")\n###############}\n\n###############boxplot = cardoonPlot(expression(boxplotFunction()), width=1000, height=1000, res=100,)\n###############boxplot = boxplot$png\n\n\n\n#ff<-formula(paste(\"invsimpson.comm ~ metadata$\", column_to_aggregate, sep=\"\"))\n#myPlot <- function(){\n# boxplot(ff, xlab = column_to_aggregate, ylab=ylab)\n#}\n\n#larger\n#diversityPlot <- cardoonPlot(expression(myPlot()), width=1000, height=1000, res=100)\n#smaller\n#small.diversityPlot <- cardoonPlot(expression(myPlot()))\n\n#make image:png.base64\n#diversityPlot = diversityPlot$png\n#small.diversityPlot <- small.diversityPlot$png\n\n\n\n\n\n\n\n\n\n"}}, "name": "WorkshopTopToBottom", "size": 0, "updated": "2016-12-06T16:49:20.689000+00:00"}