{"description": "", "inputs": [{"description": "taxon to use as the root of an extracted OpenTree subtree", "format": "text", "id": "taxonName", "name": "Taxon Root of Subtree", "type": "string"}], "mode": "python", "name": "OpenTree Taxonomy Tree Return Subtree from Taxon", "outputs": [{"description": "returned OpenTree subtree", "format": "newick", "id": "subtree", "name": "OpenTree subtree", "type": "tree"}, {"format": "text", "id": "outstring", "name": "Debug String", "type": "string"}], "script": "#\n# Return an OpenTree Subtree given a starting taxon\n#\n# description: this analysis starts with a taxon name, resolves to an OTT ID, then\n# pulls the subtree below this taxon\n# \n# input: taxon - (string) taxon name to serve as the root of the returned tree\n# output: subtree -  subtree returned by OpenTree\n#\n\nimport requests\nimport json\n\noutrows = []\noutstring = ''\n\n\n# curl -POST https://api.opentreeoflife.org/v3/tnrs/match_names -H \"content-type:application/json\" \n# -d '{\"names\":[\"Aster\",\"Symphyotrichum\",\"Barnadesia\"]}'\n\n# pack the names into a payload and perform the OpenTree lookup using v3, which has same syntax as v2.\npayload = json.dumps({'names': [taxonName]})\noutstring = outstring+'payload: '+payload\nheaders = {'content-type':'application/json'}\nresp = requests.post('https://api.opentreeoflife.org/v2/tnrs/match_names',data=payload,headers=headers)\noutstring = outstring+' \\nresponse: '+resp.text\n\ntry:\n    returnedrecs = resp.json()['results']\n    thisresult = returnedrecs[0]\n    candidate = thisresult['matches'][0]\n    ottName = candidate['ot:ottTaxonName']\n    ottId = candidate['ot:ottId']\n    outstring += '\\n returned name: '+ottName+' ottId: '+str(ottId)\nexcept:\n    outstring = outstring+'\\nerror in OpenTree TNRS lookup. No result returned'\n\n\n\n# now return the subtree from a given OTT ID\n# curl -X POST https://api.opentreeoflife.org/v3/tree_of_life/subtree -H \"content-type:application/json\" -d '{\"node_id\":\"ott803675\"}'\n\n# build an OTL query to return the matching ottId we want to use to request taxa \nottIdNameString = 'ott'+str(ottId)\npayload = json.dumps({'ott_id' : ottIdNameString, 'label_format':'name'})\nheaders = {'content-type':'application/json'}\nquerystring = 'https://api.opentreeoflife.org/v3/taxonomy/subtree'\nrespTree = requests.post(querystring,data=payload,headers=headers)\noutstring = outstring+' \\n tree response: \\n'+respTree.text\ntry:\n    respTreeJson = respTree.json()\n    subtree = respTreeJson['newick']\n    # add an extra set of parenthesis around the newick tree returned to fit the original definition of Newick format\n    #subtree = '('+subtree[:-1]+');'\n    outstring += '\\n extracted subtree: '+subtree\n    #subtree = ';'\nexcept:\n    subtree = ';'\n    outstring = outstring+'\\nerror returning OpenTree Subtree'\n  \n    \n"}