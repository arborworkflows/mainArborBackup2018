{"description": "Process a tree and modify the tip names: output genus_species, but remove postfix labels, such as _L115", "inputs": [{"description": "nested format tree to extract node names from", "format": "nested", "name": "tree", "type": "tree"}], "mode": "python", "name": "Tree Remove Name Postfix Label", "outputs": [{"description": "output tree with genus_species, but remove any postfix labels, such as _L115", "format": "nested", "id": "renamedtree", "name": "Renamed Tree", "type": "tree"}], "script": "\n# traverse a tree in nested format and output a single column table with species names from the tree taxa\n\n# C. Lisle\n# KnowledgeVis, LLC\n\n# released under the Apache 2.0 open-source license\n\n# inputs:\n#    tree - tree in nested format \n# outputs:\n#    nametable - table:rows with single column containing species names from the tree taxa\n\nnameList = []\n\n# this is invoked for each taxon node in the tree.  If the taxon is named, the name is added to a global list\ndef taxonOperation(node):\n    if 'node name' in node['node_data'].keys():\n        node['node_data']['node name'] = node['node_data']['node name'].split(\"_\")[0]+'_'+node['node_data']['node name'].split(\"_\")[1]\n\n# recursive traversal of tree in nested format.  Once a taxon is reached, invoke the 'taxonOperation()' routine with the taxon node\ndef traverseNestedTree(treenode):\n    # look at the current tree node and see if there are children or not\n    if 'children' in treenode.keys():\n        #case for a hierarchy node, traverse to all the children\n        for node in treenode['children']:\n            traverseNestedTree(node)\n    else:\n        #case for a taxa. Look through the occurrence and add records to \n        # this node\n        taxonOperation(treenode)\n        \n# run the traversal and copy the output name list\nrenamedtree = tree\ntraverseNestedTree(renamedtree)\n\n"}