{"_id": "5a93794054cdbf069250d178", "_modelType": "item", "baseParentId": "5a6f778d54cdbf077f6de37f", "baseParentType": "collection", "created": "2018-02-26T03:04:32.495000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "5a6f778e54cdbf077f6de381", "meta": {"analysis": {"description": "", "inputs": [{"format": "nested", "id": "tree", "name": "tree", "type": "tree"}], "mode": "python", "name": "Tree Assign Unique Node IDs", "outputs": [{"description": "tree with unique IDs on the nodes", "format": "nested", "id": "treeWithIDs", "name": "treeWithIDs", "type": "tree"}], "script": "\n# this routine traverses a phylo tree in nested format. Add a nodeid and then\n# increment the count every time we encounter a node during a depth first search\n\nnodecount = 1\n\ndef addUniqueIDsToTreeNodes(treenode):\n    global nodecount\n    treenode['node_data']['nodeid'] = nodecount\n    nodecount += 1\n    # look at the current tree node and see if there are children or not\n    if 'children' in treenode.keys():\n        #case for a hierarchy node, traverse to all the children\n        for node in treenode['children']:\n            addUniqueIDsToTreeNodes(node)\n        \n    \n# here are the top level actions, add locations and output the tree\n\naddUniqueIDsToTreeNodes(tree)\ntreeWithIDs = tree"}}, "name": "Tree Assign Unique Node IDs", "size": 0, "updated": "2018-02-26T03:06:31.845000+00:00"}