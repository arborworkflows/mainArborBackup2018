{"_id": "58feaa3754cdbf01a433aff2", "_modelType": "item", "baseParentId": "58fe954954cdbf01a433afeb", "baseParentType": "collection", "created": "2017-04-25T01:45:27.607000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58fe954954cdbf01a433afed", "meta": {"analysis": {"description": "", "inputs": [{"default": {"data": "Default", "format": "text", "type": "string"}, "description": "name of the Arbor collection to write the downloaded trees into", "format": "text", "id": "collectionName", "name": "collectionName", "type": "string"}, {"description": "2-column table with OpenTree ot:studyId and ot:treeId", "format": "rows", "id": "table", "name": "Tree enumeration table", "type": "table"}], "mode": "python", "name": "Loop - Download OpenTree Study Trees", "outputs": [{"format": "text", "id": "debugString", "name": "Status Output", "type": "string"}], "script": "# Loop - Download OpenTree Study Trees\n\nimport json\nimport requests\nimport girder_worker\nimport girder_client\n\n# this analysis expects a two-column table with each row containing an OpenTree studyID and a treeID within \n# the study.  This method fetches each tree and stores the trees into a named collection, which is presumed to exist already. This method\n# can read the output of the \"OpenTree Enumerate Trees from Study\" method, which produces the table format \n# expected by this method. \n\n# this is a looping method that goes through a study tree table and repeatedly calls a subordinate workflow to retrieve the tree \n# and get its list of tree tips.  First, the subordinate analysis is looked up by name using the Girder Client. \n\ndebugString = ''\n\n# create instance of the girder client\ngc = girder_client.GirderClient(apiUrl='http://arbor.arborworkflows.com/girder/api/v1')\n# lookup the analysis in a known location (the opentree collection)\nmethodToLoop = \"Return Tree from OpenTree Study by Name\"\nmethodSearchResults = gc.resourceLookup('/collection/opentree/Analyses/'+methodToLoop)\nanalysis = methodSearchResults['meta']['analysis']\n\ndebugString += 'Trees processed:\\n'\n\n# now we have a JSON description of the analysis method to run inside the loop. Loop through \n# the input, calling the subordinate method for each row of the input table,\n\nfor row in table['rows']:\n    inputs = {\n        'studyID': {'format': 'string', 'data': row['ot:studyId']},\n        'treeID': {'format': 'string', 'data': row['ot:treeId']}\n    }\n    # run the analysis\n    debugString += 'about to run\\n'\n    outputs = girder_worker.run(analysis, inputs,{'newickString': {'format': 'string'}})\n    debugString += 'completed run\\n'\n\n    # get the tree, store it in a temporary file\n    downloadedTree = outputs['newickString']['data']\n    treename = row['ot:treeId']+'.phy'\n    treefullpath = \"/tmp/\"+treename\n    with open(treefullpath, \"w\") as text_file:\n        text_file.write(downloadedTree)\n        debugString += 'tree:'+downloadedTree+'\\n'\n        \n    # now get a pointer to the Data diretory of the Arbor collection specified as input to this method\n    record = gc.resourceLookup('/collection/'+collectionName+'/Data')\n    folderID = record['_id']\n    debugString += 'folder id:'+folderID+'\\n'\n    \n    # create a new girder item named after the treename and attach the file to the new item\n    item = gc.createItem(folderID, treename, 'study tree in Newick format')\n    iteminfo = gc.loadOrCreateItem(treename,folderID,reuseExisting=True)\n    print \"iteminfo:\",iteminfo\n    #debugString += 'item: '+iteminfo['_id']\n    \n    # put the appropriate metadata on the item, indicating it is a Newick tree\n    #gc.addMetadataToItem(iteminfo['_id'], {'flow': {'format': 'tree','type': 'newick'}})\n    # attach the tree file to the girder item\n    #gc.uploadFileToItem(iteminfo['_id'], treefullpath)\n    \n    # record that we processed a tree from the input table\n    debugString += 'tree: '+row['ot:treeId']+'\\n'\n    \n\n        \n"}}, "name": "Loop - Download OpenTree Study Trees", "size": 0, "updated": "2017-04-25T04:48:09.275000+00:00"}