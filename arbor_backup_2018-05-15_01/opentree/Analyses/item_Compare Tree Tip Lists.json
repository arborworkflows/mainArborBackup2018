{"_id": "590de99f54cdbf2d4cbf0805", "_modelType": "item", "baseParentId": "58fad7c954cdbf552d799223", "baseParentType": "collection", "created": "2017-05-06T15:19:59.924000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58fad7c954cdbf552d799225", "meta": {"analysis": {"description": "", "inputs": [{"description": "enumeration of tree tips in a table:rows structure, assumed 1 column", "format": "rows", "id": "table1", "name": "table1", "type": "table"}, {"description": "Tree tip list for comparison with the first table by this method", "format": "rows", "id": "table2", "name": "table2", "type": "table"}], "mode": "python", "name": "Compare Tree Tip Lists", "outputs": [{"description": "count of entries found only in table1", "format": "text", "id": "table1UniqueCount", "name": "table1UniqueCount", "type": "string"}, {"description": "count of entries found only in table2 (but not in table1)", "format": "text", "id": "table2UniqueCount", "name": "table2UniqueCount", "type": "string"}, {"description": "count of entries found in both tables", "format": "text", "id": "tablesCommonCount", "name": "tablesCommonCount", "type": "string"}], "script": "# tree tips comparision\n# KnowledgeVis, LLC\n# May 2017\n\n# loop through the primary table (table1) and compare with the secondary list (table2) to \n# generate three results:  (1) entries only in table1, (2) entries common to both lists, and (3) entries only in table2\n# The third result is achieved by subtracting result#2 (common elements) from the total length of table2.  \n\n# Performance is not optimized here, but we use a dictionary for the table2, assuming table2 (sometimes the OpenTree case)\n# may be in general longer, so we place table2 content into a dictionary to utilize the efficiency of hash-based lookups.\n\ndebugString = ''\ndict2 = {}\n\n# find the columnname\nt2colname = table2['fields'][0]\n\n# store all entries in table2 as keys in a dictionary to use hashing for lookups. The value doesn't really matter, so \n# just store a boolean value to avoid wasting memory\nfor row in table2['rows']:\n    dict2[row[t2colname]] = True\n    \ntable1OnlyCount = 0\ncommonCount = 0\n#commonList = []\n\nt1colname = table1['fields'][0]\nfor row in table1['rows']:\n    if row[t1colname] in dict2.keys():\n        commonCount += 1\n        #commonList.append(row[t1colname])\n    else:\n        table1OnlyCount += 1\n\n# now that we are done scanning, the table2 only entry count can be calculated\ntable2OnlyCount = len(table2['rows']) - commonCount\n\n# return string values to make it easier to review through Arbor interface\ntable1UniqueCount = str(table1OnlyCount)\ntable2UniqueCount = str(table2OnlyCount)\ntablesCommonCount = str(commonCount)\n\n\n    \n"}}, "name": "Compare Tree Tip Lists", "size": 0, "updated": "2017-05-06T16:43:28.269000+00:00"}