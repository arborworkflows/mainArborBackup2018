{"_id": "590f258a54cdbf37f0651151", "_modelType": "item", "baseParentId": "58fad7c954cdbf552d799223", "baseParentType": "collection", "created": "2017-05-07T13:47:54.416000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58fad7c954cdbf552d799225", "meta": {"analysis": {"description": "Prune an input tree a specified number of levels down from the root.  If nodes on the input tree don't have an existing name, a unique name (e.g. \"node1\",\"node2\", etc.) is assigned to them because they may end up being tips if they are on the bottom level.  This way tips always have names.  If the input tree had node names, they will be preserved. Incoming branch lengths (or lack thereof) will be preserved. ", "inputs": [{"description": "input tree to be pruned", "format": "nested", "id": "tree", "name": "tree", "type": "tree"}, {"default": {"data": "2", "format": "text", "type": "string"}, "description": "the number of levels to pass through to the output tree; levels below are pruned", "format": "number", "id": "numLevels", "name": "number of levels to pass through", "type": "number"}], "mode": "python", "name": "Prune Tree On Levels Below Root", "outputs": [{"format": "nested", "id": "prunedTree", "name": "Pruned Output Tree", "type": "tree"}], "script": "# traverse a tree in nested format and prune it a selectable set of levels below the root.  This can be used\n# to create family or order-level hierarchies instead of traversing all the way to the leaves.\n\n# C. Lisle\n# KnowledgeVis, LLC\n\n# released under the Apache 2.0 open-source license\n\n# inputs:\n#    tree - tree in nested format \n#   numLevels - how deep to traverse (1=children of root, 2=children of children of root, etc...)\n# outputs:\n#    prunedtree - starting at the same root, return a smaller tree\n\n# for a description of the nested tree format, please see the tree format description at http://girder_worker.readthedocs.org\n\nnodenumber = 1\n\n# recursive traversal of tree in nested format.  Once a taxon is reached, invoke the 'taxonOperation()' routine with the taxon node\ndef traverseNestedTree(treenode,levelsRemaining):\n    global nodenumber\n    # if there is no name on this node, assign a name, since it might become a tip\n    if len(treenode['node_data']['node name'])==0:\n        treenode['node_data']['node name'] = 'node'+str(nodenumber)\n        nodenumber += 1\n    if levelsRemaining >0:\n        # look at the current tree node and see if there are children or not\n        if 'children' in treenode.keys():\n            #case for a hierarchy node, traverse to all the children\n            for node in treenode['children']:\n                traverseNestedTree(node,levelsRemaining-1)\n        else:\n            pass\n    else:\n        # prune the tree by deleting the children field, if it is there\n        if 'children' in treenode.keys():\n            del treenode['children']\n    \n# run the traversal.  The tree is changed in place\ntraverseNestedTree(tree,numLevels)\nprunedTree = tree\n\n\n"}}, "name": "Prune Tree On Levels Below Root", "size": 0, "updated": "2017-05-07T13:47:54.540000+00:00"}