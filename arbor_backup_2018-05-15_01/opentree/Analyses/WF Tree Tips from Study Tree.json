{"connections": [{"name": "nametable", "output": "nametable", "output_step": "Tip Names from Nested Tree"}, {"input": "studyID", "input_step": "Return Tree from OpenTree Study by Name", "name": "studyID"}, {"input": "treeID", "input_step": "Return Tree from OpenTree Study by Name", "name": "treeID"}, {"input": "tree", "input_step": "Tip Names from Nested Tree", "output": "tree", "output_step": "Return Tree from OpenTree Study by Name"}, {"name": "newickString", "output": "newickString", "output_step": "Return Tree from OpenTree Study by Name"}, {"input": "useOriginalNames", "input_step": "Return Tree from OpenTree Study by Name", "name": "Use Original Study Tree Tip Names"}], "description": "", "inputs": [{"default": {"data": "ot_598", "format": "text", "type": "string"}, "format": "text", "id": "studyID", "name": "studyID", "type": "string", "x": 60, "y": 94}, {"default": {"data": "Tr_518", "format": "text", "type": "string"}, "format": "text", "id": "treeID", "name": "treeID", "type": "string", "x": 64, "y": 221}, {"default": {"data": "False", "format": "text", "type": "string"}, "description": "output with study tree names (true) or OTT taxonomy names (False)", "format": "text", "id": "Use Original Study Tree Tip Names", "name": "Use Original Study Tree Tip Names", "type": "string", "x": 61, "y": 379}], "mode": "workflow", "name": "WF Tree Tips from Study Tree", "outputs": [{"description": "single column table with species names", "format": "rows", "id": "nametable", "name": "nametable", "type": "table", "x": 974, "y": 218}, {"description": "output the Newick format tree as a string to review", "format": "text", "id": "newickString", "name": "newickString", "type": "string", "x": 694, "y": 363}], "steps": [{"girderId": "58fd208c54cdbf552d799306", "modified": "2017-04-23T21:45:48.286443+00:00", "name": "Tip Names from Nested Tree", "task": {"description": "", "inputs": [{"description": "nested format tree to extract node names from", "format": "nested", "name": "tree", "type": "tree"}], "mode": "python", "name": "Tip Names from Nested Tree", "outputs": [{"description": "single column table with species names", "format": "rows", "name": "nametable", "type": "table"}], "script": "\n# traverse a tree in nested format and output a single column table with species names from the tree taxa\n\n# C. Lisle\n# KnowledgeVis, LLC\n\n# released under the Apache 2.0 open-source license\n\n# inputs:\n#    tree - tree in nested format \n# outputs:\n#    nametable - table:rows with single column containing species names from the tree taxa\n\nnameList = []\n\n# this is invoked for each taxon node in the tree.  If the taxon is named, the name is added to a global list\ndef taxonOperation(node):\n    if 'node name' in node['node_data'].keys():\n        nameList.append(node['node_data']['node name'])\n\n        \n# recursive traversal of tree in nested format.  Once a taxon is reached, invoke the 'taxonOperation()' routine with the taxon node\ndef traverseNestedTree(treenode):\n    # look at the current tree node and see if there are children or not\n    if 'children' in treenode.keys():\n        #case for a hierarchy node, traverse to all the children\n        for node in treenode['children']:\n            traverseNestedTree(node)\n    else:\n        #case for a taxa. Look through the occurrence and add records to \n        # this node\n        taxonOperation(treenode)\n        \n# run the traversal and copy the output name list\ntraverseNestedTree(tree)\n\n# prepare the output single column table of species names\nnametable = {}\nnametable['fields'] = []\nnametable['rows'] = []\nnametable['fields'].append('name')\n\nfor name in nameList:\n    outRecord = {}\n    outRecord['name'] = name\n    nametable['rows'].append(outRecord)\n    \n\n"}, "visualization": false, "x": 655, "y": 216}, {"girderId": "58fbf32b54cdbf552d799285", "modified": "2017-05-03T21:15:07.715000+00:00", "name": "Return Tree from OpenTree Study by Name", "task": {"description": "", "inputs": [{"default": {"data": "ot_598", "format": "text", "type": "string"}, "format": "text", "id": "studyID", "name": "studyID", "type": "string"}, {"default": {"data": "Tr_518", "format": "text", "type": "string"}, "format": "text", "id": "treeID", "name": "treeID", "type": "string"}, {"default": {"data": "False", "format": "text", "type": "string"}, "description": "output with study tree names (true) or OTT taxonomy names (False)", "format": "text", "id": "useOriginalNames", "name": "Use Original Study Tree Tip Names", "type": "string"}], "mode": "python", "name": "Return Tree from OpenTree Study by Name", "outputs": [{"description": "Output tree in Newick format", "format": "newick", "id": "tree", "name": "tree", "type": "tree"}, {"description": "output the Newick format tree as a string to review", "format": "text", "id": "newickString", "name": "newickString", "type": "string"}], "script": "#\n# Return Tree from OpenTree Study by Name\n#\n# description: this analysis expects a two-column table with an OpenTree studyID and a treeID within \n# the study.  This method fetches the tree and returns it as a newick tree (tree:newick format).  This method\n# can read the output of the \"OpenTree Enumerate Trees from Study\" method, which produces the table format \n# expected by this method. \n# \n# input: studyID - study number\n#        treeID - tree ID within the study to retrieve\n# output: outTree -  tree in newick format\n#\n\n\nimport requests\nimport unicodedata\n\noutrows = []\nstringdebug = ''\n\n\n# build an OTL query to return the matching ottId we want to use to request taxa\nif useOriginalNames == 'True':\n    query = 'https://api.opentreeoflife.org/v3/study/'+studyID+'/tree/'+treeID+'.tre'\nelse:\n    query = 'https://api.opentreeoflife.org/v3/study/'+studyID+'/tree/'+treeID+'.tre/?tip_label=ot:otttaxonname'\nresp = requests.get(query)\n\n# output as a readable newick string\nnewickString = resp.text\nnoSingleQuotes = newickString.replace(\"'\",\"\")\n\n# output as a Newick tree type\ntree = noSingleQuotes\n\n     "}, "visualization": false, "x": 357, "y": 222}]}