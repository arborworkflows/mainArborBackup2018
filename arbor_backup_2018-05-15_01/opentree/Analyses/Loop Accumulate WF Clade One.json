{"description": "", "inputs": [{"description": "table of OTL format names, such as 'genus_species_ott12344'", "format": "rows", "id": "table", "name": "table", "type": "table"}], "mode": "python", "name": "Loop Accumulate WF Clade One", "outputs": [{"format": "rows", "id": "outTable", "name": "outTable", "type": "table"}], "script": "import json\nimport requests\nimport girder_worker\nimport girder_client\nimport os\n\n# this is a looping method that goes through a study tree table and repeatedly calls a subordinate workflow to retrieve the tree \n# and get its list of tree tips.  First, the subordinate analysis is looked up by name using the Girder Client. \n\ndebugString = ''\n\n#print 'input table:',intable\n\n# create instance of the girder client\ngc = girder_client.GirderClient(apiUrl='http://arbor.arborworkflows.com/girder/api/v1')\n#gc = girder_client.GirderClient(apiUrl='http://localhost:8080/girder/api/v1')\n# lookup the analysis in a known location (the opentree collection)\nmethodToLoop = \"WF Clade Analysis One\"\nmethodSearchResults = gc.resourceLookup('/collection/opentree/Analyses/'+methodToLoop)\nanalysis = methodSearchResults['meta']['analysis']\n#print 'analysis:',analysis\n\ndebugString += json.dumps(analysis)\ndebugString += '\\n'\n\n# now we have a JSON description of the analysis method to run inside the loop. Start with an empty output and loop through \n# the input, calling the subordinate method for each row of the input table\n\noutTable = {}\noutTable['fields'] = ['taxonName','UnmappedStudyTips','UniqueOpenTreeTips','CommonTips']\noutTable['rows'] = []\n\n# clear out records from any previous runs\ntry:\n    os.system('rm /tmp/attempts')\nexcept:\n    pass\n\nfor row in table['rows']:\n\n    # if a single name table is passed in, just pick out the first column, regardless of its title.  Otherwise\n    # look for the case of an OpenTree study table being passed in.\n    \n    if len(table['fields'])==1:\n        taxon = row[table['fields'][0]]\n    else:\n        taxon = row['ot:focalCladeOTTTaxonName']\n        \n    # write out which entry we are attempting\n    #os.system('echo '+taxon+ ' >> /tmp/attempts')\n        \n    # setup the inputs to the clade analysis workflow. This workflow takes a taxon and compares all study trees\n    # with all the OpenTree synthesis tips below the taxon. \n    \n    inputs = {\n        'taxonName': {'format': 'string', 'data': taxon}\n    }\n    outputs = {\n        'table1UniqueCount' :{'format': 'string'},\n        'table2UniqueCount' : {'format': 'string'},\n        'tablesCommonCount' : {'format': 'string'}\n    }\n    # run the analysis\n    #debugString += 'about to run\\n'\n    AnalysisOutputs = girder_worker.run(analysis, inputs, outputs)\n    #debugString += 'completed run\\n'\n\n    # get the tips from this tree and output a debug status containing the treename\n    uniqueT1 = AnalysisOutputs['table1UniqueCount']['data']\n    uniqueT2 = AnalysisOutputs['table2UniqueCount']['data']\n    common = AnalysisOutputs['tablesCommonCount']['data']\n    \n    # write out which entry we are attempting\n    os.system('echo '+taxon+' '+uniqueT1 + ' ' + uniqueT2 + ' '+common+ ' >> /tmp/attempts')\n    \n    outrow = {}\n    outrow['taxonName'] = taxon\n    outrow['UnmappedStudyTips'] = uniqueT1\n    outrow['UniqueOpenTreeTips'] = uniqueT2\n    outrow['CommonTips'] = common\n    debugString += 'taxon: '+taxon +'\\n'\n    outTable['rows'].append(outrow)\n\n\n\n"}