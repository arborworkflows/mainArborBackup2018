{"_id": "5907e96054cdbf7a5dff84f9", "_modelType": "item", "baseParentId": "58fad7c954cdbf552d799223", "baseParentType": "collection", "created": "2017-05-02T02:05:20.619000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58fad7c954cdbf552d799225", "meta": {"analysis": {"description": "", "inputs": [{"format": "rows", "name": "table", "type": "table"}], "mode": "python", "name": "Loop Accumulate Tree Tips from Study Tree Table", "outputs": [{"format": "text", "id": "debugString", "name": "Debug Output", "type": "string"}, {"format": "rows", "id": "accumulatedTips", "name": "accumulatedTips", "type": "table"}], "script": "import json\nimport requests\nimport girder_worker\nimport girder_client\n\n# this is a looping method that goes through a study tree table and repeatedly calls a subordinate workflow to retrieve the tree \n# and get its list of tree tips.  First, the subordinate analysis is looked up by name using the Girder Client. \n\ndebugString = ''\n\n\n# create instance of the girder client\ngc = girder_client.GirderClient(apiUrl='http://arbor.arborworkflows.com/girder/api/v1')\n# lookup the analysis in a known location (the opentree collection)\nmethodToLoop = \"WF Tree Tips from Study Tree\"\nmethodSearchResults = gc.resourceLookup('/collection/opentree/Analyses/'+methodToLoop)\nanalysis = methodSearchResults['meta']['analysis']\n\ndebugString += json.dumps(analysis)\ndebugString += '\\n'\n\n# now we have a JSON description of the analysis method to run inside the loop. Start with an empty output and loop through \n# the input, calling the subordinate method for each row of the input table\naccumulatedTips = {}\naccumulatedTips['fields'] = ['name']\naccumulatedTips['rows'] = []\n\nfor row in table['rows']:\n    inputs = {\n        'studyID': {'format': 'string', 'data': row['ot:studyId']},\n        'treeID': {'format': 'string', 'data': row['ot:treeId']}\n    }\n    # run the analysis\n    #debugString += 'about to run\\n'\n    outputs = girder_worker.run(analysis, inputs,{'result': {'format': 'rows'}})\n    #debugString += 'completed run\\n'\n\n    # get the tips from this tree and output a debug status containing the treename\n    tipsFromOneTree = outputs['nametable']['data']\n    debugString += 'tree: '+row['ot:treeId']+'\\n'\n    \n    # add the discovered tips from one tree into the output list\n    for newrow in tipsFromOneTree['rows']:\n        accumulatedTips['rows'].append(newrow)\n        \n#uniqueTips = set(accumulatedTips)\n#accumulatedTips = []\n#for x in uniqueTips:\n#    accumulatedTips\n"}}, "name": "Loop Accumulate Tree Tips from Study Tree Table", "size": 0, "updated": "2017-05-02T03:41:48.848000+00:00"}