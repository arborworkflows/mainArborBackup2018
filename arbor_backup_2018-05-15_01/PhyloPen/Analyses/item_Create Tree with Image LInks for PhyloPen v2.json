{"_id": "58a659fb54cdbf04513b9f4c", "_modelType": "item", "baseParentId": "58a659bc54cdbf04513b9f48", "baseParentType": "collection", "created": "2017-02-17T02:03:39.433000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58a659bc54cdbf04513b9f49", "meta": {"analysis": {"description": "", "inputs": [{"description": "tree to add characters and images to", "format": "nested", "id": "tree", "name": "tree", "type": "tree"}, {"description": "character matrix to add to tree tips", "format": "rows", "id": "matrix", "name": "matrix", "type": "table"}, {"description": "2 column table (taxon, imageURL) for adding image references to taxa", "format": "rows", "id": "image_reference_table", "name": "image_reference_table", "type": "table"}], "mode": "python", "name": "Create Tree with Image LInks for PhyloPen v2", "outputs": [{"description": "tree with trait and image reference data in the named nodes", "format": "nested", "id": "tree_with_traits", "name": "tree_with_traits", "type": "tree"}, {"description": "running print statements during execution to understand/debug any problems", "format": "string", "id": "console_output", "name": "console_output", "type": "string"}], "script": "#\n# Take a tree, matrix, and an image reference table as input. Create a nested format\n# tree with image references and attributes attached to the leaves of the tree for display\n# \n# KnowledgeVis, LLC\n# C Lisle\n#\n# update history\n# 2/22/16 - modified for multiple images option per taxon, with text\n\n# inputs:\n# tree - nested format tree with tipnames that match the matrix names\n# matrix - character matrix with names that match the tree tips\n# image_reference_table - 2 column table with tipname and image URL to load the image from\n\n# look through the rows of the image cross reference table.  This format comes from the phenoscape team\n# and has been processed by a previous method to look up the girder item numbers\ndef returnMatchingImageRecord(name):\n    global image_reference_table\n    record = {}\n    for row in image_reference_table['rows']:\n        #print 'looking for ',name,' in ',row\n        if (('taxon' in row) and (name == row['taxon'])):\n            return row['url']\n        if (('species' in row) and (name == row['species'])):\n            return row['url']\n        if (('name' in row) and (name == row['name'])):\n            return row['url']\n    return record\n          \ndef forceHTTPS(string):\n    return string.replace('http','https')\n    \n# look through the image matching table.  Three options for taxon name are supported because\n# matrices may not always be indexed the same.  We allow name,species, or taxon:\ndef returnMatchingImageRecordList(name):\n    global image_reference_table\n    records = []\n    for row in image_reference_table['rows']:\n        if 'content' in row['url']:\n            #print 'looking for ',name,' in ',row\n            if (('taxon' in row) and (name == row['taxon'])):\n                # if we found a name match, but no image was resolved, don't add this option\n                if len(row['url'])>0:\n                    newrecord = {'image': forceHTTPS(row['url']), 'text': row['taxon']}\n                    if 'character' in row:\n                        newrecord['text'] += '/character='+ str(row['character'])\n                    if 'state' in row:\n                        newrecord['text'] += '/state='+ str(row['state'])\n                    records.append(newrecord)\n            if (('species' in row) and (name == row['species'])):\n                # if we found a name match, but no image was resolved, don't add this option\n                if len(row['url'])>0:\n                    newrecord = {'image': forceHTTPS(row['url']), 'text': row['species']}\n                    if 'character' in row:\n                        newrecord['text'] += '/character='+ str(row['character'])\n                    if 'state' in row:\n                        newrecord['text'] += '/state='+ str(row['state'])\n                    records.append(newrecord)\n            if (('name' in row) and (name == row['name'])):\n                # if we found a name match, but no image was resolved, don't add this option\n                if len(row['url'])>0:\n                    newrecord = {'image': forceHTTPS(row['url']), 'text': row['name']}\n                    if 'character' in row:\n                        newrecord['text'] += '/character='+ str(row['character'])\n                    if 'state' in row:\n                        newrecord['text'] += '/state='+ str(row['state'])\n                    records.append(newrecord)\n    return records\n                        \n# look through the rows of the matrix and return a matching entry.  Return the \n# URL record or an empty set (to avoid run-time errors if data doesn't match\n\ndef returnMatchingMatrixRecord(name):\n    global console_output\n    global matrix\n    record = {}\n    for row in matrix['rows']:\n        print 'looking for ',name,' in matrix ',row\n        console_output += 'looking for name match for: '+name+' in row: '+row['name']\n        if (('name' in row) and (name == row['name'])):\n            return row\n        if (('species' in row) and (name == row['species'])):\n            return row\n        if (('taxa' in row) and (name == row['taxa'])):\n            print 'found taxon match'\n            return row\n    return record\n\n            \ndef convertToNumbers(s):\n    try:\n        return float(s)\n    except:\n        return s\n        \n# traverse through the tree and add records to the tips from the matrix and the image table\ndef addRecordsToTreeTips(treenode,level):\n    global console_output\n    console_output+='ar('+str(level)+') '\n    \n    #if no node weight, add a placeholder value because PhyloPen is looking for node weight \n    if 'node weight' not in treenode['node_data']:\n        treenode['node_data']['node weight'] = 1\n            \n    if len(treenode['children']) > 0:\n        for node in treenode['children']:\n            level = level +1\n            addRecordsToTreeTips(node,level)\n    else:\n        console_output += 'tip: '\n        # this is a tip, add matrix and image information\n        nodename = treenode['node_data']['node name']\n        #console_output += 'searching for matrix entry for'+nodename\n        console_output += nodename+'\\n'\n        traits = returnMatchingMatrixRecord(nodename)\n        #console_output += ' matching trait record is: '+traits['name']+'\\n'\n\n        treenode['node_data']['attributes'] = []\n        # add all columns in the character matrix, unless they are the taxa name, since this is already handled in the 'node name' \n        # Try to convert attribute values to numbers so that we don't return \"235\" when we could return the number 235\n        for trait in traits.keys():\n            if trait not in ['species','name','taxa','image']:\n                traitvalue = convertToNumbers(traits[trait])\n                treenode['node_data']['attributes'].append({trait: traitvalue})\n        \n        # add the image attribute to point to the image binary.  There might be more than one image, so \n        # make the entry always be a list. Later we might change these records to have a key tied to a character\n        # to select which image, but just a list initially\n        nodename = treenode['node_data']['node name']\n        # only add an image record if we found an image to match this taxon\n        imageURLs = returnMatchingImageRecordList(treenode['node_data']['node name'])\n        #print 'matching image record:',imageURL\n        for imageRecord in imageURLs:\n            if 'images' in treenode['node_data']:\n                treenode['node_data']['images'].append(imageRecord)\n            else:\n                treenode['node_data']['images'] = []\n                treenode['node_data']['images'].append(imageRecord)\n\n# this routine adds any matrix categories to the record on the root of the tree that specifies\n# what fields are on the nodes.  PhyloPen uses this to parse for attributes to display in the attribute list UI\n\ndef addTraitsToNodeFieldsRecord(treeroot):\n    global matrix\n    #for field in matrix['fields']:\n    #    if field not in ['species','name','taxa']:\n    #        treeroot['node_fields'].append(field)\n    # indicate an attributes record\n    treeroot['node_fields'].append('attributes')\n    # indicate there could be an images record as well\n    treeroot['node_fields'].append('images')\n\n# ---- top level -----\n\nconsole_output = 'start\\n'\ntree_with_traits = tree\naddRecordsToTreeTips(tree_with_traits,0)\n#addTraitsToNodeFieldsRecord(tree_with_traits)\n\n\n"}}, "name": "Create Tree with Image LInks for PhyloPen v2", "size": 0, "updated": "2018-04-14T17:39:54.298000+00:00"}