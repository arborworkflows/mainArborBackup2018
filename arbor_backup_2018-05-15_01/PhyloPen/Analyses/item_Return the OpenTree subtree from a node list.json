{"_id": "58e90bf454cdbf7bfe6bea35", "_modelType": "item", "baseParentId": "58a659bc54cdbf04513b9f48", "baseParentType": "collection", "created": "2017-04-08T16:12:36.440000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "58a659bc54cdbf04513b9f49", "meta": {"analysis": {"description": "", "inputs": [{"description": "input matrix containing a column ottid", "format": "rows", "name": "table", "type": "table"}], "mode": "python", "name": "Return the OpenTree subtree from a node list", "outputs": [{"format": "text", "id": "outstring", "name": "debug output string", "type": "string"}, {"format": "newick", "name": "tree", "type": "tree"}, {"description": "quick preview read out of the tree as a newick string", "format": "text", "name": "treeNewickString", "type": "string"}], "script": "import requests\nimport json\n\nrows = table['rows']\nidList = []\nfor i in range(len(rows)):\n    idList.append(rows[i]['ottId'])\n\n# lookup the tree that contains these nodes\n#payload = {\"ottIds\": idList}\n#resp = requests.post('http://api.opentreeoflife.org/treemachine/v1/getDraftTreeSubtreeForNodes',data=payload)\n#tree = str(resp.json()[\"subtree\"])\n\noutstring = ''\n# moving to API v3, same syntax as v2\npayload = json.dumps({\"ott_ids\": idList})\noutstring = outstring+'payload:'+payload\nresp = requests.post('https://api.opentreeoflife.org/v3/tree_of_life/induced_subtree',data=payload)\noutstring = outstring+'\\nresponse:'+resp.text\n\ntry:\n    tree = str(resp.json()[\"newick\"])\nexcept:\n    outstring = outstring+'\\nerror: OpenTree did not return a resulting newick tree'\n    tree = '(B,(A,C,E),D);'\n    \n# tree as a string to preview \ntreeNewickString = tree\n"}}, "name": "Return the OpenTree subtree from a node list", "size": 0, "updated": "2017-04-08T16:38:46.420000+00:00"}