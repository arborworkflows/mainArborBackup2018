{"_id": "5a6a0c4d54cdbf077f6de36e", "_modelType": "item", "baseParentId": "5a679af854cdbf077f6de346", "baseParentType": "collection", "created": "2018-01-25T16:56:45.735000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "5a679af854cdbf077f6de348", "meta": {"analysis": {"description": "", "inputs": [{"format": "rows", "id": "matrix", "name": "matrix", "type": "table"}, {"description": "a phylo tree with shortened names on the tips", "format": "nested", "name": "tree", "type": "tree"}], "mode": "python", "name": "Make Tree Tips Match Matrix", "outputs": [{"format": "nested", "name": "tree_fullnames", "type": "tree"}], "script": "# Make Tree Tip Names Match Matrix\n#\n# C. Lisle\n# KnowledgeVis, LLC\n# \n# released under Apache 2.0 open-source license\n#\n# This analysis is an algorithm to modify truncated taxa tip names to match the full names in a provided character matrix.  The character names are read in as \n# an authoritative name list.  Then the taxa nodes are processed and each name is matched against the name list to be replaced with its full name.\n\n# inputs:\n# tree - a tree (nested format) with shortened names on the tips.  Names are the prefix (up to 9 chars) of the genus name\n# matrix - a character matrix with full species names of the form (genus_species)\n# truncateLength - integer indicating how long the maximum name would be in the tree; used to prepare a matching name list\n\n# output:\n# tree_fullnames - tree (in nested format) with modified names that match the matrix\n\n# setup global lists\nspeciesNames = []\nspeciesNamesShort = []\n\n# utility function to detect and return the species name column.\ndef returnSpeciesColumnName():\n    possibleNames = ['species','Species','scientific name','X','x','Scientific Name','name','Name','scientific_name','Scientific_Name','Column 1']\n    for name in enumerate(possibleNames):\n        if name in matrix['fields']:\n            return name\n    # default to species if operation fails\n    return 'species'\n\n\n# return a matching name from the name list.  A name is matched against the list and the fullname is\n# returned if a match is found.  If no match is found, the name is returned unchanged.\n\ndef returnNameMatch(name,shortNameList,fullNameList):\n    for i in range(len(shortNameList)):\n        if shortNameList[i] == name:\n            return fullNameList[i]\n    return name\n    \n    \n# build a list of the species named in the matrix.  A list of full-length names is build and a list with the names truncated to the genus name\n# up to length 'truncateLength' characters are built, indexed in the same order.  This will speed up matching against names\n\ndef buildSpeciesNameLists():\n    columnName = returnSpeciesColumnName()\n    for row in matrix['rows']:\n        speciesNames.append(row[columnName])\n        shortName = row[columnName].split('_')[0][:truncateLength]\n        speciesNamesShort.append(shortName)\n\n\n# this is an operation to perform on a taxon node to replace its name.  It is called for each taxon of the tree\ndef taxonOperation(node):\n    # only replace names if they exist.  test first so routine doesn't cause a runtime exception if a name is missing\n    if ('node name' in node['node_data'].keys()):\n        originalName = node['node_data']['node name']\n        noStartingH = originalName[2:]\n        newName = noStartingH.split('_')[0]\n        node['node_data']['node name'] = newName\n\n    \n\n# utility routine to recursively traverse through a phylo tree in nested format.  This traversal starts at the top and recursively traverses the tree.\n# once it finds a taxon, then the routine 'taxonOperation' is called with the taxon node as an argument.  \n\ndef treeTraversal(treenode):\n    # look at the current tree node and see if there are children or not\n    if 'children' in treenode.keys():\n        #case for a hierarchy node, traverse to all the children\n        for node in treenode['children']:\n            treeTraversal(node)\n    else:\n        #case for a taxa. Run a previously-defined operation on the taxon node\n        taxonOperation(treenode)    \n\n# Top Level Operations \n\n#  setup the structures and go through the tree nodes and replace any names with full names from the reference name list.  The traversal replaces names\n# in place, so when the traversal is done the tree has new node names\n\n\n#buildSpeciesNameLists()\ntreeTraversal(tree)\ntree_fullnames = tree\n\n"}}, "name": "Make Tree Tips Match Matrix", "size": 0, "updated": "2018-02-25T14:51:46.512000+00:00"}