{"description": "", "inputs": [{"format": "rows", "name": "table", "type": "table"}, {"format": "r.apetree", "name": "tree", "type": "tree"}], "mode": "python", "name": "Phylo Loop", "outputs": [{"format": "rows", "name": "result", "type": "table"}], "script": "import json\nimport requests\nimport girder_worker\nimport girder_client\n\n# create instance of the girder client\ngc = girder_client.GirderClient(apiUrl='http://arbor.arborworkflows.com/girder/api/v1')\n# lookup the analysis in a known location (the opentree collection)\nmethodToLoop = \"Phylogenetic signal\"\nmethodSearchResults = gc.resourceLookup('/collection/Default/Analyses/'+methodToLoop)\nanalysis = methodSearchResults['meta']['analysis']\n\n\naggregated_rows = []\nmod_fields = []\n\nfor column in table['fields'][1:]:\n    inputs = {\n        'table': {'format': 'rows', 'data': table},\n        'tree': {'format': 'r.apetree', 'data': tree},\n        'column': {'format': 'text', 'data': column},\n        'method': {'format': 'text', 'data': 'lambda'}\n    }\n    try:\n        outputs = girder_worker.run(analysis, inputs, {'result': {'format': 'rows'}})\n        part = outputs['result']['data']\n    \n        mod_rows = []\n        mod_fields = ['Column']\n        for row in part['rows']:\n            mod_row = {'Column': column}\n            for field in row:\n                mod_field = field[(len(column) + 1):]\n                mod_row[mod_field] = row[field]\n                mod_fields.append(mod_field)\n            mod_rows.append(mod_row)\n        aggregated_rows += mod_rows\n    except:\n        pass\n\nresult = {\n    'fields': mod_fields,\n    'rows': aggregated_rows\n}\n"}