{"_id": "577b6bd954cdbf3c14cc461a", "_modelType": "item", "baseParentId": "577b697d54cdbf3c14cc45e1", "baseParentType": "collection", "created": "2016-07-05T08:12:09.849000+00:00", "creatorId": "5761b37954cdbf3c14cc45bc", "description": "", "folderId": "577b697e54cdbf3c14cc45e3", "meta": {"analysis": {"description": "", "inputs": [{"description": "A table with trait data to recode", "format": "r.dataframe", "id": "table", "name": "table", "type": "table"}, {"description": "The column name containing the trait data to recode", "domain": {"format": "column.names", "input": "table"}, "format": "text", "id": "column", "name": "column", "type": "string"}, {"description": "A string of semicolon-separated rules to recode the data. For example, \"'a'=0; 'b'=1; 'c'=NA\" replaces 'a','b', and 'c' with '0', '1', and 'NA' respectively.", "format": "text", "id": "rules", "name": "rules", "type": "string"}, {"description": "The name given to the new recoded data vector in the output table. If unspecified, the column will be named 'new$COLUMN'", "format": "text", "id": "newName", "name": "newName", "type": "string"}], "mode": "r", "name": "recodeData", "outputs": [{"description": "Output table with the recoded data", "format": "r.dataframe", "id": "newTable", "name": "newTable", "type": "table"}], "script": "## Recode functions from car package\nsqueezeBlanks <- function(text){\n  gsub(\" *\", \"\", text)\n}\n\nrecode <- function(var, recodes, as.factor.result, as.numeric.result = TRUE, \n          levels){\n  lo <- -Inf\n  hi <- Inf\n  recodes <- gsub(\"\\n|\\t\", \" \", recodes)\n  recode.list <- rev(strsplit(recodes, \";\")[[1]])\n  is.fac <- is.factor(var)\n  if (missing(as.factor.result)) \n    as.factor.result <- is.fac\n  if (is.fac) \n    var <- as.character(var)\n  result <- var\n  for (term in recode.list) {\n    if (0 < length(grep(\":\", term))) {\n      range <- strsplit(strsplit(term, \"=\")[[1]][1], \":\")\n      low <- try(eval(parse(text = range[[1]][1])), silent = TRUE)\n      if (class(low) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             low)\n      }\n      high <- try(eval(parse(text = range[[1]][2])), silent = TRUE)\n      if (class(high) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             high)\n      }\n      target <- try(eval(parse(text = strsplit(term, \"=\")[[1]][2])), \n                    silent = TRUE)\n      if (class(target) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             target)\n      }\n      result[(var >= low) & (var <= high)] <- target\n    }\n    else if (0 < length(grep(\"^else=\", squeezeBlanks(term)))) {\n      target <- try(eval(parse(text = strsplit(term, \"=\")[[1]][2])), \n                    silent = TRUE)\n      if (class(target) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             target)\n      }\n      result[1:length(var)] <- target\n    }\n    else {\n      set <- try(eval(parse(text = strsplit(term, \"=\")[[1]][1])), \n                 silent = TRUE)\n      if (class(set) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             set)\n      }\n      target <- try(eval(parse(text = strsplit(term, \"=\")[[1]][2])), \n                    silent = TRUE)\n      if (class(target) == \"try-error\") {\n        stop(\"\\n  in recode term: \", term, \"\\n  message: \", \n             target)\n      }\n      for (val in set) {\n        if (is.na(val)) \n          result[is.na(var)] <- target\n        else result[var == val] <- target\n      }\n    }\n  }\n  if (as.factor.result) {\n    result <- if (!missing(levels)) \n      factor(result, levels = levels)\n    else as.factor(result)\n  }\n  else if (as.numeric.result && (!is.numeric(result))) {\n    result.valid <- na.omit(result)\n    opt <- options(warn = -1)\n    result.valid <- as.numeric(result.valid)\n    options(opt)\n    if (!any(is.na(result.valid))) \n      result <- as.numeric(result)\n  }\n  result\n}\n## Recode and add to table\nnewVector <- recode(as.character(table[[column]]), rules )\nnewTable <- table\nnewTable[[newName]] <- newVector\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}}, "name": "recodeData", "size": 0, "updated": "2016-07-05T08:12:09.982000+00:00"}