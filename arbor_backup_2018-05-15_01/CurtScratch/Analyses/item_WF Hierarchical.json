{"_id": "5876bca854cdbf7e75d96de8", "_modelType": "item", "baseParentId": "57b346d854cdbf74fd194480", "baseParentType": "collection", "created": "2017-01-11T23:15:52.726000+00:00", "creatorId": "575874fe54cdbf51760708f3", "description": "", "folderId": "57b346d854cdbf74fd194481", "meta": {"analysis": {"connections": [{"input": "inputTable", "input_step": "CS Workflow 1", "output": "outTable", "output_step": "CS Workflow"}, {"input": "outRowCount", "input_step": "CS Workflow", "name": "outRowCount"}, {"input": "outRowCount", "input_step": "CS Workflow 1", "name": "outRowCount"}, {"input": "inputTable", "input_step": "CS Workflow", "name": "inputTable"}, {"input": "operation", "input_step": "CS Workflow", "name": "operation"}, {"input": "columnname", "input_step": "CS Workflow", "name": "columnname"}, {"input": "testvalue", "input_step": "CS Workflow", "name": "testvalue"}, {"name": "outTable", "output": "outTable", "output_step": "CS Workflow 1"}, {"input": "operation", "input_step": "CS Workflow 1", "name": "operation"}, {"input": "columnname", "input_step": "CS Workflow 1", "name": "columnname"}, {"input": "testvalue", "input_step": "CS Workflow 1", "name": "testvalue"}], "description": "", "inputs": [{"description": "how many rows should the output table have?", "format": "number", "id": "outRowCount", "name": "outRowCount", "type": "number", "x": 123, "y": 44}, {"format": "rows", "id": "inputTable", "name": "inputTable", "type": "table", "x": 79, "y": 167}, {"default": "[object Object]", "domain": ["GreaterThan", "LessThan", "EqualTo", "NotEqualTo"], "format": "text", "id": "operation", "name": "operation", "type": "string", "x": 111, "y": 287}, {"default": {"data": "'awesomeness'", "format": "text"}, "domain": {"format": "column.names", "input": "inputTable"}, "format": "text", "id": "columnname", "name": "columnname", "type": "string", "x": 61, "y": 357}, {"format": "text", "id": "testvalue", "name": "testvalue", "type": "string", "x": 96, "y": 421}], "mode": "workflow", "name": "WF Hierarchical", "outputs": [{"format": "rows", "id": "outTable", "name": "outTable", "type": "table", "x": 1217, "y": 214}], "steps": [{"girderId": "5876bab854cdbf7e75d96dda", "modified": "2017-01-11T23:09:55.931786+00:00", "name": "CS Workflow", "task": {"connections": [{"input": "table", "input_step": "Select random rows", "output": "outTable", "output_step": "Filter by attribute"}, {"input": "outRowCount", "input_step": "Select random rows", "name": "outRowCount"}, {"name": "outTable", "output": "outTable", "output_step": "Select random rows"}, {"input": "inputTable", "input_step": "Filter by attribute", "name": "inputTable"}, {"input": "operation", "input_step": "Filter by attribute", "name": "operation"}, {"input": "columnname", "input_step": "Filter by attribute", "name": "columnname"}, {"input": "testvalue", "input_step": "Filter by attribute", "name": "testvalue"}], "description": "", "inputs": [{"description": "how many rows should the output table have?", "format": "number", "id": "outRowCount", "name": "outRowCount", "type": "number", "x": 578, "y": 321}, {"format": "rows", "id": "inputTable", "name": "inputTable", "type": "table", "x": 143, "y": 64}, {"default": "[object Object]", "domain": ["GreaterThan", "LessThan", "EqualTo", "NotEqualTo"], "format": "text", "id": "operation", "name": "operation", "type": "string", "x": 110, "y": 201}, {"default": {"data": "'awesomeness'", "format": "text"}, "domain": {"format": "column.names", "input": "inputTable"}, "format": "text", "id": "columnname", "name": "columnname", "type": "string", "x": 82, "y": 333}, {"format": "text", "id": "testvalue", "name": "testvalue", "type": "string", "x": 360, "y": 349}], "mode": "workflow", "name": "CS Workflow", "outputs": [{"format": "rows", "id": "outTable", "name": "outTable", "type": "table", "x": 1018, "y": 171}], "steps": [{"girderId": "577b698a54cdbf3c14cc45f1", "modified": "2016-07-05T08:02:19.342000+00:00", "name": "Filter by attribute", "task": {"inputs": [{"format": "rows", "name": "inputTable", "type": "table"}, {"default": "[object Object]", "domain": ["GreaterThan", "LessThan", "EqualTo", "NotEqualTo"], "format": "text", "name": "operation", "type": "string"}, {"default": {"data": "'awesomeness'", "format": "text"}, "domain": {"format": "column.names", "input": "inputTable"}, "format": "text", "name": "columnname", "type": "string"}, {"format": "text", "name": "testvalue", "type": "string"}], "mode": "python", "name": "Filter by attribute", "outputs": [{"format": "rows", "name": "outTable", "type": "table"}], "script": "\n# input: inputTable - a list of rows (2D table)\n# input: operation = string: \"GreaterThan\",\"LessThan\",\"NotEqual\", \"Equal\", \"EqualTo\"\n# input: columnname = string name of columnname\n# input: testvalue - value used to compare the entry in the selected column with\n# output: outTable\n\n# find all rows in this input  that match the test criteria.\noutTable = {}\n\n# this might be a number or it might be a character string, so check\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n        \n# prepare for the output table format of table:rows        \ncolumnHeaders = inputTable['fields']\noutColumns = []\nif is_number(testvalue):\n    testnumber = float(testvalue)\n    for i in range(len(inputTable['rows'])):\n        row = inputTable['rows'][i]\n        if operation == \"GreaterThan\":\n            if row[columnname] > testnumber:\n                outColumns.append(row)\n        if operation == \"LessThan\":\n            if row[columnname] < testnumber:\n                outColumns.append(row)\n        if operation == \"NotEqual\":\n            if row[columnname] != testnumber:\n                outColumns.append(row)\n        if (operation == \"EqualTo\"):\n            if row[columnname] == testnumber:\n                outColumns.append(row)\nelse:\n    for i in range(len(inputTable['rows'])):\n        row = inputTable['rows'][i]\n        if operation == \"GreaterThan\":\n            if row[columnname] > testvalue:\n                outColumns.append(row)\n        if operation == \"LessThan\":\n            if row[columnname] < testvalue:\n                outColumns.append(row)\n        if operation == \"NotEqual\":\n            if row[columnname] != testvalue:\n                outColumns.append(row)\n        if (operation == \"EqualTo\"):\n            if row[columnname] == testvalue:\n                outColumns.append(row)\n\noutTable = {'fields': columnHeaders, 'rows': outColumns}\n\n"}, "visualization": false, "x": 490, "y": 126}, {"girderId": "577b698b54cdbf3c14cc45f9", "modified": "2016-07-05T08:02:19.531000+00:00", "name": "Select random rows", "task": {"inputs": [{"format": "rows", "name": "table", "type": "table"}, {"description": "how many rows should the output table have?", "format": "number", "name": "outRowCount", "type": "number"}], "mode": "python", "name": "Select random rows", "outputs": [{"format": "rows", "name": "outTable", "type": "table"}], "script": "from random import randint\n#\n# pick random rows out of a table, according to the rowcount passed as an argument\n\n# input: table\n# input: outRowCount - how many rows to pick from the input table\n# output: outTable\n\ntableRowCount = len(table['rows'])\noutColumns = []\n\n# loop the number of times in the output row count; selecting a random row each time\nfor i in range(outRowCount):\n    outColumns.append(table['rows'][randint(0,tableRowCount-1)])\n    \noutTable = {}\noutTable['fields'] = table['fields']\noutTable['rows'] = outColumns\n"}, "visualization": false, "x": 776, "y": 169}]}, "visualization": false, "x": 411, "y": 287}, {"girderId": "5876bab854cdbf7e75d96dda", "modified": "2017-01-11T23:09:55.931786+00:00", "name": "CS Workflow 1", "task": {"connections": [{"input": "table", "input_step": "Select random rows", "output": "outTable", "output_step": "Filter by attribute"}, {"input": "outRowCount", "input_step": "Select random rows", "name": "outRowCount"}, {"name": "outTable", "output": "outTable", "output_step": "Select random rows"}, {"input": "inputTable", "input_step": "Filter by attribute", "name": "inputTable"}, {"input": "operation", "input_step": "Filter by attribute", "name": "operation"}, {"input": "columnname", "input_step": "Filter by attribute", "name": "columnname"}, {"input": "testvalue", "input_step": "Filter by attribute", "name": "testvalue"}], "description": "", "inputs": [{"description": "how many rows should the output table have?", "format": "number", "id": "outRowCount", "name": "outRowCount", "type": "number", "x": 578, "y": 321}, {"format": "rows", "id": "inputTable", "name": "inputTable", "type": "table", "x": 143, "y": 64}, {"default": "[object Object]", "domain": ["GreaterThan", "LessThan", "EqualTo", "NotEqualTo"], "format": "text", "id": "operation", "name": "operation", "type": "string", "x": 110, "y": 201}, {"default": {"data": "'awesomeness'", "format": "text"}, "domain": {"format": "column.names", "input": "inputTable"}, "format": "text", "id": "columnname", "name": "columnname", "type": "string", "x": 82, "y": 333}, {"format": "text", "id": "testvalue", "name": "testvalue", "type": "string", "x": 360, "y": 349}], "mode": "workflow", "name": "CS Workflow", "outputs": [{"format": "rows", "id": "outTable", "name": "outTable", "type": "table", "x": 1018, "y": 171}], "steps": [{"girderId": "577b698a54cdbf3c14cc45f1", "modified": "2016-07-05T08:02:19.342000+00:00", "name": "Filter by attribute", "task": {"inputs": [{"format": "rows", "name": "inputTable", "type": "table"}, {"default": "[object Object]", "domain": ["GreaterThan", "LessThan", "EqualTo", "NotEqualTo"], "format": "text", "name": "operation", "type": "string"}, {"default": {"data": "'awesomeness'", "format": "text"}, "domain": {"format": "column.names", "input": "inputTable"}, "format": "text", "name": "columnname", "type": "string"}, {"format": "text", "name": "testvalue", "type": "string"}], "mode": "python", "name": "Filter by attribute", "outputs": [{"format": "rows", "name": "outTable", "type": "table"}], "script": "\n# input: inputTable - a list of rows (2D table)\n# input: operation = string: \"GreaterThan\",\"LessThan\",\"NotEqual\", \"Equal\", \"EqualTo\"\n# input: columnname = string name of columnname\n# input: testvalue - value used to compare the entry in the selected column with\n# output: outTable\n\n# find all rows in this input  that match the test criteria.\noutTable = {}\n\n# this might be a number or it might be a character string, so check\ndef is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n        \n# prepare for the output table format of table:rows        \ncolumnHeaders = inputTable['fields']\noutColumns = []\nif is_number(testvalue):\n    testnumber = float(testvalue)\n    for i in range(len(inputTable['rows'])):\n        row = inputTable['rows'][i]\n        if operation == \"GreaterThan\":\n            if row[columnname] > testnumber:\n                outColumns.append(row)\n        if operation == \"LessThan\":\n            if row[columnname] < testnumber:\n                outColumns.append(row)\n        if operation == \"NotEqual\":\n            if row[columnname] != testnumber:\n                outColumns.append(row)\n        if (operation == \"EqualTo\"):\n            if row[columnname] == testnumber:\n                outColumns.append(row)\nelse:\n    for i in range(len(inputTable['rows'])):\n        row = inputTable['rows'][i]\n        if operation == \"GreaterThan\":\n            if row[columnname] > testvalue:\n                outColumns.append(row)\n        if operation == \"LessThan\":\n            if row[columnname] < testvalue:\n                outColumns.append(row)\n        if operation == \"NotEqual\":\n            if row[columnname] != testvalue:\n                outColumns.append(row)\n        if (operation == \"EqualTo\"):\n            if row[columnname] == testvalue:\n                outColumns.append(row)\n\noutTable = {'fields': columnHeaders, 'rows': outColumns}\n\n"}, "visualization": false, "x": 490, "y": 126}, {"girderId": "577b698b54cdbf3c14cc45f9", "modified": "2016-07-05T08:02:19.531000+00:00", "name": "Select random rows", "task": {"inputs": [{"format": "rows", "name": "table", "type": "table"}, {"description": "how many rows should the output table have?", "format": "number", "name": "outRowCount", "type": "number"}], "mode": "python", "name": "Select random rows", "outputs": [{"format": "rows", "name": "outTable", "type": "table"}], "script": "from random import randint\n#\n# pick random rows out of a table, according to the rowcount passed as an argument\n\n# input: table\n# input: outRowCount - how many rows to pick from the input table\n# output: outTable\n\ntableRowCount = len(table['rows'])\noutColumns = []\n\n# loop the number of times in the output row count; selecting a random row each time\nfor i in range(outRowCount):\n    outColumns.append(table['rows'][randint(0,tableRowCount-1)])\n    \noutTable = {}\noutTable['fields'] = table['fields']\noutTable['rows'] = outColumns\n"}, "visualization": false, "x": 776, "y": 169}]}, "visualization": false, "x": 887, "y": 72}]}}, "name": "WF Hierarchical", "size": 0, "updated": "2017-01-11T23:18:59.091000+00:00"}